>>> matrix_mul = __import__('100-matrix_mul').matrix_mul
>>> matrix_mul("hello", [[1, 2]])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/root/alx-higher_level_programming/0x07-python-test_driven_development/100-matrix_mul.py", line 12, in matrix_mul
    raise TypeError("m_a must be a list")
TypeError: m_a must be a list
>>> matrix_mul(["hello", "how"], [[1, 2]])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/root/alx-higher_level_programming/0x07-python-test_driven_development/100-matrix_mul.py", line 18, in matrix_mul
    raise TypeError("m_a must be a list of lists")
TypeError: m_a must be a list of lists
>>> matrix_mul([[1, 2]], ["hello", "how"])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/root/alx-higher_level_programming/0x07-python-test_driven_development/100-matrix_mul.py", line 21, in matrix_mul
    raise TypeError("m_b must be a list of lists")
TypeError: m_b must be a list of lists
>>> matrix_mul([[1, 2]], [[]])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/root/alx-higher_level_programming/0x07-python-test_driven_development/100-matrix_mul.py", line 26, in matrix_mul
    raise ValueError("m_b can't be empty")
ValueError: m_b can't be empty
>>> matrix_mul([[]], [[1, 2]])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/root/alx-higher_level_programming/0x07-python-test_driven_development/100-matrix_mul.py", line 24, in matrix_mul
    raise ValueError("m_a can't be empty")
ValueError: m_a can't be empty
>>> matrix_mul([[1, 2], ["Hello", 9]], [[9, 4], [2, 5]])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/root/alx-higher_level_programming/0x07-python-test_driven_development/100-matrix_mul.py", line 31, in matrix_mul
    raise TypeError("m_a should contain only integers or floats")
TypeError: m_a should contain only integers or floats
>>> matrix_mul([[9, 4], [2, 5]], [[1, 2], ["Hello", 9]])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/root/alx-higher_level_programming/0x07-python-test_driven_development/100-matrix_mul.py", line 35, in matrix_mul
    raise TypeError("m_b should contain only integers or floats")
TypeError: m_b should contain only integers or floats
>>> matrix_mul([[9, 4], [2]], [[1, 2], [4, 9]])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/root/alx-higher_level_programming/0x07-python-test_driven_development/100-matrix_mul.py", line 41, in matrix_mul
    raise TypeError("each row of m_a must should be of the same size")       
TypeError: each row of m_a must should be of the same size
>>> matrix_mul([[9, 4], [2, 7.0]], [[1], [4, 9]])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/root/alx-higher_level_programming/0x07-python-test_driven_development/100-matrix_mul.py", line 46, in matrix_mul
    raise TypeError("each row of m_b must should be of the same size")       
TypeError: each row of m_b must should be of the same size
>>> matrix_mul([[9, 4, 4], [2, 8, 2]], [[1, 2], [4, 9]])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/root/alx-higher_level_programming/0x07-python-test_driven_development/100-matrix_mul.py", line 56, in matrix_mul
    raise ValueError("m_a and m_b can't be multiplied")
ValueError: m_a and m_b can't be multiplied
>>> matrix_mul()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'
